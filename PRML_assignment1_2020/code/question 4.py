# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SerE0YEw4WVc3W1sdQfMcK0ECjGbrKJz
"""

from google.colab import drive
drive.mount('/content/drive')

import glob
import numpy as np
import math
import pandas as pd
import random
import scipy.linalg as la
import matplotlib.pyplot as plt
import cv2

def PCA(C):
  S=C.T @ C
  eval,evect=np.linalg.eigh(S)
  # print(eval)
  # eval=eval.real
  # evect=[evect[:,i] for i in range(len(eval)) ]
  # print(eval.real)
  # print(eval[0])
  return eval,evect
  # return 0

from random import shuffle
np.random.seed(7)
def load_images(category,n_test):
  f=glob.glob("drive/My Drive/prml assignment/assignment 1/question 4/"+category+"/*")

  l=[]
  test=[]
  a=0
  b=0
  flag=0
  shuffle(f)
  for i in f:
    img=cv2.imread(i,0)
    img=img[...,None]
    img=cv2.resize(img,(80,80))
    img=np.array(img).astype('float32')
    if (flag == 0):
      a,b=img.shape
    img.resize(a*b)
    l.append(img)

  print(f)
  test=l[:n_test]
  print(len(test))
  l=l[n_test:]
  test=np.asarray(test).astype('float32')/255
  l=np.asarray(l).astype('float32')/255
  return l,test,a*b

# for category 1 headphones
train,test,n_eigv=load_images(category='1',n_test=5)
print(train.shape)
eig_v,eig_vect = PCA(np.matrix(train))
print(len(eig_v),eig_vect.shape)

# for category 2 vessels
train2,test2,n_eigv2=load_images(category='2',n_test=5)
print(train2.shape)
eig_v2,eig_vect2= PCA(np.matrix(train2))
print(len(eig_v2),eig_vect2.shape)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

print("                         point in categort 1  ","                    point in categort 2     ")
print(" c     ","distance w.r.t category 1 "," distance w.r.t category 2  ","     distance w.r.t category 2 ","     distance w.r.t category 1     ")
# avg distance of category 1 test image w.r.t. both catgories for given % of eigen vectors
d1=[]
# avg distance of category 2 test image w.r.t. both catgories for given % of eigen vectors
d2=[]
# sum of avg distance of category 1 test image w.r.t. category 1
dsum1=[]
# sum of avg distance of category 1 test image w.r.t. category 2
dsum2=[]
# sum of avg distance of category 2 test image w.r.t. category 1
dsum11=[]
# sum of avg distance of category 2 test image w.r.t. category 2
dsum22=[]
K=[0.1,0.2,0.3,0.5,0.75,1]
for i in range(len(K)):
  c = n_eigv * K[i]
  c=int(c)
  l = eig_vect[:,-1:-1+-1*c:-1]
      #      20 * 1600  @ 1600 * c
  project =  train @ l
  project_test = test @ l 

  l2 = eig_vect2[:,-1:-1+-1*c:-1]
      #      20 * 1600  @ 1600 * c
  project2 =  train2 @ l2
  project_test2 = test2 @ l2 
  

  plt.figure(figsize=(15,15))

  # plot for category 1 image
  for i in range(len(project)):
    t=project[i,:]
    t = t @ l.T
    # t=t.reshape((80,80))
    plt.subplot(5,5,i+1)
    plt.imshow(np.reshape(t*255,(80,80)),cmap = plt.cm.gray)
  
  plt.figure(figsize=(15,15))
  for i in range(len(project_test)):
    t=project_test[i,:]
    t = t @ l.T
    # t=t.reshape((80,80))
    plt.subplot(1,5,i+1)
    plt.imshow(np.reshape(t*255,(80,80)),cmap = plt.cm.gray)

  #plot image of category2
  plt.figure(figsize=(15,15))
  for i in range(len(project2)):
    t=project2[i,:]
    t = t @ l2.T
    # t=t.reshape((80,80))
    plt.subplot(5,5,i+1)
    plt.imshow(np.reshape(t*255,(80,80)),cmap = plt.cm.gray)
  
  plt.figure(figsize=(15,15))
  for i in range(len(project_test2)):
    t=project_test2[i,:]
    t = t @ l2.T
    # t=t.reshape((80,80))
    plt.subplot(1,5,i+1)
    plt.imshow(np.reshape(t*255,(80,80)),cmap = plt.cm.gray)



  s=[sum(np.sum(np.power((project-project_test[j,:]),2),axis=1).getA1())/len(project) for j in range(len(project_test))]
  s_=[sum(np.sum(np.power((project2-project_test[j,:]),2),axis=1).getA1())/len(project2) for j in range(len(project_test))]

  s_2=[sum(np.sum(np.power((project-project_test2[j,:]),2),axis=1).getA1())/len(project) for j in range(len(project_test2))]
  s2=[sum(np.sum(np.power((project2-project_test2[j,:]),2),axis=1).getA1())/len(project2) for j in range(len(project_test2))]
  d1.append([s,s_])
  d2.append([s2,s_2])
  dsum1.append(sum(s))
  dsum2.append(sum(s_))
  dsum11.append(sum(s2))
  dsum22.append(sum(s_2))
  print(c,"\t",sum(s),"\t\t",sum(s_),"\t","\t",sum(s2),"\t\t",sum(s_2))

# print(d2) 
plt.figure(figsize=(10,16))

# print(d1[0][1])
for j in range(len(K)):
  p1=[]
  p2=[]
  # for i in range(10):
  #   p1.append(d1[i][0][j])
  #   p2.append(d1[i][1][j])
  # print(p1,p2)
  p1=d1[j][0]
  p2=d1[j][1]
  plt.subplot(3,2,j+1)
  plt.title("for top "+str(K[j] *100)+"% of eigen values")
  plt.xlabel("x-axis/ test image")
  plt.ylabel("y-axis/avg distance")
  
  plt.plot([i+1 for i in range(5)],p1,'y',label="avg distance w.r.t its own category")
  plt.plot([i+1 for i in range(5)],p2,'r',label="avg distance w.r.t opposite category")
  plt.legend()
plt.savefig('category1.png',dpi=500)
plt.figure(figsize=(10,16))
for j in range(len(K)):
  p1=[]
  p2=[]
  # for i in range(10):
  #   p1.append(d2[i][0][j])
  #   p2.append(d2[i][1][j])
  # print(p1,p2)
  p1=d2[j][0]
  p2=d2[j][1]
  plt.subplot(3,2,j+1)
  plt.title("for top "+str(K[j] *100)+"% of eigen values")
  plt.xlabel("x-axis/ test image")
  plt.ylabel("y-axis/avg distance")
  
  plt.plot([i+1 for i in range(5)],p1,'g',label="avg distance w.r.t its own category")
  plt.plot([i+1 for i in range(5)],p2,'b',label="avg distance w.r.t opposite category")
  plt.legend()
plt.savefig("category2.png",dpi=500)

plt.figure(figsize=(4,10))
plt.subplot(2,1,1)
# plt.title("relation between no of eigencomponent and sum of avg distance of all test images of category 1 w.r.t, category 1 and 2")
plt.plot(K,dsum1,'r',label="category 1")
plt.plot(K,dsum2,'b',label="category 2")
plt.xlabel('no of eigencomponent in %')
plt.ylabel('sum of avg distance of test images')
plt.legend()
plt.subplot(2,1,2)
# plt.title("relation between no of eigencomponent and sum of avg distance of all test images of category 2 w.r.t, category 1 and 2")
plt.plot(K,dsum11,'b',label="category 2")
plt.plot(K,dsum22,'r',label="category 1")
plt.xlabel('no of eigencomponent in %')
plt.ylabel('sum of avg distance of test images')
plt.legend()
plt.savefig('analysis.png',dpi=300)

from google.colab.patches import cv2_imshow
t=cv2.imread("drive/My Drive/prml assignment/assignment 1/question 4/0.jpg",0)
t=t[...,None]
t=np.asarray(t).astype('float32')

t=cv2.resize(t,(80,80))
a,b=t.shape
print(a)
cv2_imshow(t)
t.resize(1280*1280)
k=[]
k.append(t)
k.append(t)
s=k[:2]
print(t)
s=np.asarray(s).astype('float32')
s=np.matrix(s)
s=s[:,-1:-3:-1]
print(s)


# t=t.resize(1280,1280)
# print(t.shape)
# cv2_imshow(t)
# l.append(t.flatten())

a=[[1,1],[3,4]]
a=np.matrix(a)
print((a-[1,2]))
print(np.power((a-[1,2]),2))
print((np.sum(np.power((a-[1,2]),2),axis=1).getA1()))
print(sum(np.sum(np.power((a-[2,2]),2),axis=1).getA1()))