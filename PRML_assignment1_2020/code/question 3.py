# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SerE0YEw4WVc3W1sdQfMcK0ECjGbrKJz
"""

from google.colab import drive
drive.mount('/content/drive')

import glob
import numpy as np
import math
import pandas as pd
import random
import scipy.linalg as la
import matplotlib.pyplot as plt
import cv2

def load_data(path):
  f=pd.read_csv(path,header=None)
  # print(f.keys())
  f=np.matrix(f)
  
  return f

"""# question 3

## part a
"""

def center_data(f):
  f=f-f.sum(axis=0)/len(f)
  
  return f

def ploteign(O, T , E, color):
  plt.figure(figsize=(18,5))
  plt.subplot(131)
  plt.title("original data")
  plt.xlabel("x-axis")
  plt.ylabel("y-axis")
  plt.plot(A[:,0],A[:,1],color)

  plt.subplot(132)
  plt.title("projected data")
  plt.xlabel("x-axis/first major eigen vector")
  plt.ylabel("y-axis/second major eigen vector")
  plt.plot(T[:,0],T[:,1],color)

  plt.subplot(133)
  plt.title("eigenvlaues plot")
  plt.xlabel("x-axis/no of eigen values")
  plt.ylabel("y-axis/eigen vlaues")
  plt.plot([i for i in range(1,len(E)+1)],E,color)

def PCA(C):
  S=C.T @ C
  eval,evect=np.linalg.eigh(S)
  # print(eval)
  # eval=eval.real
  # evect=[evect[:,i] for i in range(len(eval)) ]
  # print(eval.real)
  # print(eval[0])
  return eval,evect
  # return 0

# for centered data
cA=center_data(A)


# variance along x and y
varcA=cA.var(axis=0)

# PCA
eigvc,evectc=PCA(cA)
# print(evect)
# print(eigv)


# print(evect[0]])
# print(evect.shape)
# print(eigv)

# project data point in eigen space 
projectcA= cA @ evect

# variance in data in eigen space
varcP=projectcA.var(axis=0)

# total of variance along eigen basis will remain same as total of variance along original basis

print("vaiance along x and y axis in original centered data",varcA/varcA.sum(),'\n',"vaiance along eigen axis in projected data",varcP/varcP.sum(),'\n',"total variance of orginal and projected data",varcA.sum(),varcP.sum())

"""## part b"""

# not centered data

A=load_data("drive/My Drive/prml assignment/assignment 1/question 3/Dataset3.csv")

# variance along x and y
varA=A.var(axis=0)

# PCA
eigv,evect=PCA(A)
# print(evect[0]])
# print(evect.shape)
# print(eigv)
# project data point in eigen space 
projectA= A @ evect

# variance in data in eigen space
varP=projectA.var(axis=0)

# total of variance along eigen basis will remain same as total of variance along original basis
print("vaiance along x and y axis in original data",varA/varA.sum(),'\n',"vaiance along eigen axis in projected data",varP/varP.sum(),'\n',"total variance of orginal and projected data",varA.sum(),varP.sum())

ploteign(A, projectA, eigv ,'ro')
plt.savefig('A.png',dpi=300)
ploteign(cA, projectcA, eigvc ,'bo')
plt.savefig('cA.png',dpi=300)

"""## part c"""

def k1(x,y,v):
  return (1+ x @ y.T)**v

def kernalPCA(K,f,v,top):
  nk=[]
  for i in range(len(K)):
    n=[]
    for j in range(len(K)):
      n.append(f(K[i,:],K[j,:],v).item())
      # if(i==0 and j<2):
      #   print(n)
    nk.append(n)

  # nk= K @ K.T
  d=np.matrix(nk)

  # print(d.shape)

  # eigenvector are along column
  eigv,eigvect = np.linalg.eigh(d)


  eigv = eigv[-1:(-1+-1*top):-1]
  eigvect=eigvect[:,-1:(-1)+top:-1]

  # this will put the eigenvector in row
  eigvect=[(eigvect[:,i]/(len(K)*eigv[i])**(1/2)).getA1() for i in range(top)]
  eigvect=np.matrix(eigvect)
  
  # 1000 x 1000 1000 x 2 = 1000 x 2
  projectA =  d  @ eigvect.T

  return eigv, projectA

for i in range(2,4):
  keigv, projectkA = kernalPCA(cA,k1,i,top=2)
  # print(keigvect.shape)
  # print(keigv)
  
  ploteign(cA, projectkA,keigv,'yo')
  varP=projectkA.var(axis=0)
  print("vaiance along eigen axis in projected data",varP/varP.sum(),'\n',"total variance of projected data",varP.sum())
  plt.savefig(str(i)+'.png',dpi=500)

def k2(x, y, p):
  return np.matrix(math.exp(((y-x) @ (x-y).T)/(2*p*p)))

for i in range(1,11):
  keigv, projectkA = kernalPCA(cA,k2,i/10,top=2)
  # print(keigvect.shape)
  # print(keigv)

 

  ploteign(cA, projectkA,keigv,'yo')
  varP=projectkA.var(axis=0)
  print("vaiance along eigen axis in projected data",varP/varP.sum(),'\n',"total variance of  projected data",varP.sum())
  plt.savefig(str(i)+'k2.png',dpi=500)